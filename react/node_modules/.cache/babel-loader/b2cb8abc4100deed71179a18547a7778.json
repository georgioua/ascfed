{"ast":null,"code":"var _jsxFileName = \"/Users/ageorgiou/Projects/ascfed/react/src/PaymentForm.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { Redirect } from 'react-router-dom'; // Make sure to call `loadStripe` outside of a componentâ€™s render to avoid\n// recreating the `Stripe` object on every render.\n\nconst stripePromise = loadStripe(\"pk_test_51H961DIHls7iQOHV2FLwRuMHdUvxVstlhJTavVSIxu088cnJy2SEiSbA3jjn8PHFlJbSuDA98c2nja5xgZrIho9R00aceLsEK0\"); //if (!process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY) {\n//  console.error('**Stripe publishable key environment variable not set**');\n//  console.error(\n//   '**Add an environemnt variable REACT_APP_STRIPE_PUBLISHABLE_KEY**'\n// );\n// console.error('**Replace .env.example with .env and **');\n//}\n\nconst CheckoutForm = ({\n  productSelected,\n  customer\n}) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [subscribing, setSubscribing] = useState(false);\n  const [accountInformation, setAccountInformation] = useState(null);\n  const [errorToDisplay, setErrorToDisplay] = useState('');\n\n  function handlePaymentThatRequiresCustomerAction({\n    subscription,\n    invoice,\n    priceId,\n    paymentMethodId,\n    isRetry\n  }) {\n    if (subscription && subscription.status === 'active') {\n      // subscription is active, no customer actions required.\n      return {\n        subscription,\n        priceId,\n        paymentMethodId\n      };\n    } // If it's a first payment attempt, the payment intent is on the subscription latest invoice.\n    // If it's a retry, the payment intent will be on the invoice itself.\n\n\n    const paymentIntent = invoice ? invoice.payment_intent : subscription.latest_invoice.payment_intent;\n\n    if (paymentIntent.status === 'requires_action' || isRetry === true && paymentIntent.status === 'requires_payment_method') {\n      return stripe.confirmCardPayment(paymentIntent.client_secret, {\n        payment_method: paymentMethodId\n      }).then(result => {\n        if (result.error) {\n          // start code flow to handle updating the payment details\n          // Display error message in your UI.\n          // The card was declined (i.e. insufficient funds, card has expired, etc)\n          throw result;\n        } else {\n          if (result.paymentIntent.status === 'succeeded') {\n            // There's a risk of the customer closing the window before callback\n            // execution. To handle this case, set up a webhook endpoint and\n            // listen to invoice.payment_succeeded. This webhook endpoint\n            // returns an Invoice.\n            return {\n              priceId: priceId,\n              subscription: subscription,\n              invoice: invoice,\n              paymentMethodId: paymentMethodId\n            };\n          }\n        }\n      });\n    } else {\n      // No customer action needed\n      return {\n        subscription,\n        priceId,\n        paymentMethodId\n      };\n    }\n  }\n\n  function handleRequiresPaymentMethod({\n    subscription,\n    paymentMethodId,\n    priceId\n  }) {\n    if (subscription.status === 'active') {\n      // subscription is active, no customer actions required.\n      return {\n        subscription,\n        priceId,\n        paymentMethodId\n      };\n    } else if (subscription.latest_invoice.payment_intent.status === 'requires_payment_method') {\n      // Using localStorage to store the state of the retry here\n      // (feel free to replace with what you prefer)\n      // Store the latest invoice ID and status\n      localStorage.setItem('latestInvoiceId', subscription.latest_invoice.id);\n      localStorage.setItem('latestInvoicePaymentIntentStatus', subscription.latest_invoice.payment_intent.status);\n      throw new Error('Your card was declined.');\n    } else {\n      return {\n        subscription,\n        priceId,\n        paymentMethodId\n      };\n    }\n  }\n\n  function retryInvoiceWithNewPaymentMethod({\n    paymentMethodId,\n    invoiceId\n  }) {\n    const priceId = productSelected.name.toUpperCase();\n    return fetch('/retry-invoice', {\n      method: 'post',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId: customer.id,\n        paymentMethodId: paymentMethodId,\n        invoiceId: invoiceId\n      })\n    }).then(response => {\n      return response.json();\n    }) // If the card is declined, display an error to the user.\n    .then(result => {\n      if (result.error) {\n        // The card had an error when trying to attach it to a customer.\n        throw result;\n      }\n\n      return result;\n    }) // Normalize the result to contain the object returned by Stripe.\n    // Add the addional details we need.\n    .then(result => {\n      return {\n        // Use the Stripe 'object' property on the\n        // returned result to understand what object is returned.\n        invoice: result,\n        paymentMethodId: paymentMethodId,\n        priceId: priceId,\n        isRetry: true\n      };\n    }) // Some payment methods require a customer to be on session\n    // to complete the payment process. Check the status of the\n    // payment intent to handle these actions.\n    .then(handlePaymentThatRequiresCustomerAction) // No more actions required. Provision your service for the user.\n    .then(onSubscriptionComplete).catch(error => {\n      console.log(error); // An error has happened. Display the failure to the user here.\n\n      setSubscribing(false);\n      setErrorToDisplay(error && error.error && error.error.decline_code);\n    });\n  }\n\n  function onSubscriptionComplete(result) {\n    console.log(result); // Payment was successful. Provision access to your service.\n    // Remove invoice from localstorage because payment is now complete.\n    // clearCache();\n\n    if (result && !result.subscription) {\n      const subscription = {\n        id: result.invoice.subscription\n      };\n      result.subscription = subscription;\n      localStorage.clear();\n    }\n\n    setAccountInformation(result); // Change your UI to show a success message to your customer.\n    // onSubscriptionSampleDemoComplete(result);\n    // Call your backend to grant access to your service based on\n    // the product your customer subscribed to.\n    // Get the product by using result.subscription.price.product\n  }\n\n  function createSubscription({\n    paymentMethodId\n  }) {\n    const priceId = productSelected.name.toUpperCase();\n    return fetch('/create-subscription', {\n      method: 'post',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId: customer.id,\n        paymentMethodId: paymentMethodId,\n        priceId: priceId\n      })\n    }).then(response => {\n      return response.json();\n    }) // If the card is declined, display an error to the user.\n    .then(result => {\n      if (result.error) {\n        // The card had an error when trying to attach it to a customer\n        throw result;\n      }\n\n      return result;\n    }) // Normalize the result to contain the object returned\n    // by Stripe. Add the addional details we need.\n    .then(result => {\n      return {\n        // Use the Stripe 'object' property on the\n        // returned result to understand what object is returned.\n        subscription: result,\n        paymentMethodId: paymentMethodId,\n        priceId: productSelected.name\n      };\n    }) // Some payment methods require a customer to do additional\n    // authentication with their financial institution.\n    // Eg: 2FA for cards.\n    .then(handlePaymentThatRequiresCustomerAction) // If attaching this card to a Customer object succeeds,\n    // but attempts to charge the customer fail. You will\n    // get a requires_payment_method error.\n    .then(handleRequiresPaymentMethod) // No more actions required. Provision your service for the user.\n    .then(onSubscriptionComplete).catch(error => {\n      // An error has happened. Display the failure to the user here.\n      // We utilize the HTML element we created.\n      setSubscribing(false);\n      setErrorToDisplay(error.message || error.error.decline_code);\n    });\n  }\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n    setSubscribing(true);\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement); // If a previous payment was attempted, get the lastest invoice\n\n    const latestInvoicePaymentIntentStatus = localStorage.getItem('latestInvoicePaymentIntentStatus'); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[createPaymentMethod error]', error);\n      setSubscribing(false);\n      setErrorToDisplay(error && error.message);\n      return;\n    }\n\n    console.log('[PaymentMethod]', paymentMethod);\n    const paymentMethodId = paymentMethod.id;\n\n    if (latestInvoicePaymentIntentStatus === 'requires_payment_method') {\n      // Update the payment method and retry invoice payment\n      const invoiceId = localStorage.getItem('latestInvoiceId');\n      retryInvoiceWithNewPaymentMethod({\n        paymentMethodId: paymentMethodId,\n        invoiceId: invoiceId\n      });\n      return;\n    } // Create the subscription\n\n\n    createSubscription({\n      paymentMethodId: paymentMethodId\n    });\n  };\n\n  if (accountInformation) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/account',\n        state: {\n          accountInformation: accountInformation\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 7\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"payment-form\",\n      className: \"flex justify-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"w-full inline-block border p-4 rounded-md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"font-bold text-xl mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }\n    }, \"Enter your card details. \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 38\n      }\n    }), \"Your subscription will start now.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-gray-700 text-base\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }\n    }, \"\\u2192 Total due now \", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 29\n      }\n    }, productSelected.price)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-gray-700 text-base mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }\n    }, \"\\u2192 Subscribing to\", ' ', /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 13\n      }\n    }, productSelected.name)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"w-full\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex flex-wrap -mx-3 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"w-full px-3 md:mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }\n    }, \"Full name\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"appearance-none block w-full bg-gray-200 border rounded-md py-3 px-2 mb-3 leading-tight focus:outline-none focus:bg-white\",\n      id: \"name\",\n      type: \"text\",\n      placeholder: \"First and last name\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"form\", {\n      id: \"payment-form\",\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex flex-wrap -mx-3 mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"w-full px-3 mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 19\n      }\n    }, \"Card\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"appearance-none block w-full bg-gray-200 text-gray-700 border rounded-md py-3 px-2 leading-tight focus:outline-none focus:bg-white\",\n      id: \"card-element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(CardElement, {\n      options: {\n        style: {\n          base: {\n            fontSize: '16px',\n            color: '#32325d',\n            fontFamily: '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif',\n            '::placeholder': {\n              color: '#a0aec0'\n            }\n          },\n          invalid: {\n            color: '#9e2146'\n          }\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-gray-700 text-base mt-2\",\n      role: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 19\n      }\n    }, errorToDisplay ? errorToDisplay : null))), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"submit-premium\",\n      className: \"w-full bg-pasha hover:bg-white hover:shadow-outline hover:text-pasha hover:border hover:border-black focus:shadow-outline text-white focus:bg-white focus:text-pasha font-light py-2 px-4 rounded-md\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 19\n      }\n    }, subscribing ? 'Subscribing...' : 'Subscribe')))))));\n  }\n};\n\nconst PaymentForm = props => /*#__PURE__*/React.createElement(Elements, {\n  stripe: stripePromise,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(CheckoutForm, Object.assign({}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 5\n  }\n})));\n\nexport default PaymentForm;","map":{"version":3,"sources":["/Users/ageorgiou/Projects/ascfed/react/src/PaymentForm.js"],"names":["React","useState","loadStripe","CardElement","Elements","useStripe","useElements","Redirect","stripePromise","CheckoutForm","productSelected","customer","stripe","elements","subscribing","setSubscribing","accountInformation","setAccountInformation","errorToDisplay","setErrorToDisplay","handlePaymentThatRequiresCustomerAction","subscription","invoice","priceId","paymentMethodId","isRetry","status","paymentIntent","payment_intent","latest_invoice","confirmCardPayment","client_secret","payment_method","then","result","error","handleRequiresPaymentMethod","localStorage","setItem","id","Error","retryInvoiceWithNewPaymentMethod","invoiceId","name","toUpperCase","fetch","method","headers","body","JSON","stringify","customerId","response","json","onSubscriptionComplete","catch","console","log","decline_code","clear","createSubscription","message","handleSubmit","event","preventDefault","cardElement","getElement","latestInvoicePaymentIntentStatus","getItem","paymentMethod","createPaymentMethod","type","card","pathname","state","price","style","base","fontSize","color","fontFamily","invalid","PaymentForm","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { loadStripe } from '@stripe/stripe-js';\nimport {\n  CardElement,\n  Elements,\n  useStripe,\n  useElements,\n} from '@stripe/react-stripe-js';\nimport { Redirect } from 'react-router-dom';\n\n// Make sure to call `loadStripe` outside of a componentâ€™s render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = loadStripe(\"pk_test_51H961DIHls7iQOHV2FLwRuMHdUvxVstlhJTavVSIxu088cnJy2SEiSbA3jjn8PHFlJbSuDA98c2nja5xgZrIho9R00aceLsEK0\");\n//if (!process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY) {\n//  console.error('**Stripe publishable key environment variable not set**');\n//  console.error(\n //   '**Add an environemnt variable REACT_APP_STRIPE_PUBLISHABLE_KEY**'\n // );\n // console.error('**Replace .env.example with .env and **');\n//}\n\nconst CheckoutForm = ({ productSelected, customer }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [subscribing, setSubscribing] = useState(false);\n  const [accountInformation, setAccountInformation] = useState(null);\n  const [errorToDisplay, setErrorToDisplay] = useState('');\n\n  function handlePaymentThatRequiresCustomerAction({\n    subscription,\n    invoice,\n    priceId,\n    paymentMethodId,\n    isRetry,\n  }) {\n    if (subscription && subscription.status === 'active') {\n      // subscription is active, no customer actions required.\n      return { subscription, priceId, paymentMethodId };\n    }\n\n    // If it's a first payment attempt, the payment intent is on the subscription latest invoice.\n    // If it's a retry, the payment intent will be on the invoice itself.\n    const paymentIntent = invoice\n      ? invoice.payment_intent\n      : subscription.latest_invoice.payment_intent;\n\n    if (\n      paymentIntent.status === 'requires_action' ||\n      (isRetry === true && paymentIntent.status === 'requires_payment_method')\n    ) {\n      return stripe\n        .confirmCardPayment(paymentIntent.client_secret, {\n          payment_method: paymentMethodId,\n        })\n        .then((result) => {\n          if (result.error) {\n            // start code flow to handle updating the payment details\n            // Display error message in your UI.\n            // The card was declined (i.e. insufficient funds, card has expired, etc)\n            throw result;\n          } else {\n            if (result.paymentIntent.status === 'succeeded') {\n              // There's a risk of the customer closing the window before callback\n              // execution. To handle this case, set up a webhook endpoint and\n              // listen to invoice.payment_succeeded. This webhook endpoint\n              // returns an Invoice.\n              return {\n                priceId: priceId,\n                subscription: subscription,\n                invoice: invoice,\n                paymentMethodId: paymentMethodId,\n              };\n            }\n          }\n        });\n    } else {\n      // No customer action needed\n      return { subscription, priceId, paymentMethodId };\n    }\n  }\n\n  function handleRequiresPaymentMethod({\n    subscription,\n    paymentMethodId,\n    priceId,\n  }) {\n    if (subscription.status === 'active') {\n      // subscription is active, no customer actions required.\n      return { subscription, priceId, paymentMethodId };\n    } else if (\n      subscription.latest_invoice.payment_intent.status ===\n      'requires_payment_method'\n    ) {\n      // Using localStorage to store the state of the retry here\n      // (feel free to replace with what you prefer)\n      // Store the latest invoice ID and status\n      localStorage.setItem('latestInvoiceId', subscription.latest_invoice.id);\n      localStorage.setItem(\n        'latestInvoicePaymentIntentStatus',\n        subscription.latest_invoice.payment_intent.status\n      );\n      throw new Error('Your card was declined.');\n    } else {\n      return { subscription, priceId, paymentMethodId };\n    }\n  }\n\n  function retryInvoiceWithNewPaymentMethod({ paymentMethodId, invoiceId }) {\n    const priceId = productSelected.name.toUpperCase();\n    return (\n      fetch('/retry-invoice', {\n        method: 'post',\n        headers: {\n          'Content-type': 'application/json',\n        },\n        body: JSON.stringify({\n          customerId: customer.id,\n          paymentMethodId: paymentMethodId,\n          invoiceId: invoiceId,\n        }),\n      })\n        .then((response) => {\n          return response.json();\n        })\n        // If the card is declined, display an error to the user.\n        .then((result) => {\n          if (result.error) {\n            // The card had an error when trying to attach it to a customer.\n            throw result;\n          }\n          return result;\n        })\n        // Normalize the result to contain the object returned by Stripe.\n        // Add the addional details we need.\n        .then((result) => {\n          return {\n            // Use the Stripe 'object' property on the\n            // returned result to understand what object is returned.\n            invoice: result,\n            paymentMethodId: paymentMethodId,\n            priceId: priceId,\n            isRetry: true,\n          };\n        })\n        // Some payment methods require a customer to be on session\n        // to complete the payment process. Check the status of the\n        // payment intent to handle these actions.\n        .then(handlePaymentThatRequiresCustomerAction)\n        // No more actions required. Provision your service for the user.\n        .then(onSubscriptionComplete)\n        .catch((error) => {\n          console.log(error);\n          // An error has happened. Display the failure to the user here.\n          setSubscribing(false);\n          setErrorToDisplay(error && error.error && error.error.decline_code);\n        })\n    );\n  }\n\n  function onSubscriptionComplete(result) {\n    console.log(result);\n    // Payment was successful. Provision access to your service.\n    // Remove invoice from localstorage because payment is now complete.\n    // clearCache();\n    if (result && !result.subscription) {\n      const subscription = { id: result.invoice.subscription };\n      result.subscription = subscription;\n      localStorage.clear();\n    }\n\n    setAccountInformation(result);\n    // Change your UI to show a success message to your customer.\n    // onSubscriptionSampleDemoComplete(result);\n    // Call your backend to grant access to your service based on\n    // the product your customer subscribed to.\n    // Get the product by using result.subscription.price.product\n  }\n\n  function createSubscription({ paymentMethodId }) {\n    const priceId = productSelected.name.toUpperCase();\n    return (\n      fetch('/create-subscription', {\n        method: 'post',\n        headers: {\n          'Content-type': 'application/json',\n        },\n        body: JSON.stringify({\n          customerId: customer.id,\n          paymentMethodId: paymentMethodId,\n          priceId: priceId,\n        }),\n      })\n        .then((response) => {\n          return response.json();\n        })\n        // If the card is declined, display an error to the user.\n        .then((result) => {\n          if (result.error) {\n            // The card had an error when trying to attach it to a customer\n            throw result;\n          }\n          return result;\n        })\n        // Normalize the result to contain the object returned\n        // by Stripe. Add the addional details we need.\n        .then((result) => {\n          return {\n            // Use the Stripe 'object' property on the\n            // returned result to understand what object is returned.\n            subscription: result,\n            paymentMethodId: paymentMethodId,\n            priceId: productSelected.name,\n          };\n        })\n        // Some payment methods require a customer to do additional\n        // authentication with their financial institution.\n        // Eg: 2FA for cards.\n        .then(handlePaymentThatRequiresCustomerAction)\n        // If attaching this card to a Customer object succeeds,\n        // but attempts to charge the customer fail. You will\n        // get a requires_payment_method error.\n        .then(handleRequiresPaymentMethod)\n        // No more actions required. Provision your service for the user.\n        .then(onSubscriptionComplete)\n        .catch((error) => {\n          // An error has happened. Display the failure to the user here.\n          // We utilize the HTML element we created.\n          setSubscribing(false);\n          setErrorToDisplay(error.message || error.error.decline_code);\n        })\n    );\n  }\n\n  const handleSubmit = async (event) => {\n    // Block native form submission.\n    event.preventDefault();\n\n    setSubscribing(true);\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const cardElement = elements.getElement(CardElement);\n\n    // If a previous payment was attempted, get the lastest invoice\n    const latestInvoicePaymentIntentStatus = localStorage.getItem(\n      'latestInvoicePaymentIntentStatus'\n    );\n\n    // Use your card Element with other Stripe.js APIs\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n\n    if (error) {\n      console.log('[createPaymentMethod error]', error);\n      setSubscribing(false);\n      setErrorToDisplay(error && error.message);\n      return;\n    }\n    console.log('[PaymentMethod]', paymentMethod);\n    const paymentMethodId = paymentMethod.id;\n    if (latestInvoicePaymentIntentStatus === 'requires_payment_method') {\n      // Update the payment method and retry invoice payment\n      const invoiceId = localStorage.getItem('latestInvoiceId');\n      retryInvoiceWithNewPaymentMethod({\n        paymentMethodId: paymentMethodId,\n        invoiceId: invoiceId,\n      });\n      return;\n    }\n\n    // Create the subscription\n    createSubscription({\n      paymentMethodId: paymentMethodId,\n    });\n\n    \n  };\n\n  if (accountInformation) {\n    return (\n      <Redirect\n        to={{\n          pathname: '/account',\n          state: { accountInformation: accountInformation },\n        }}\n      />\n    );\n  } else {\n    return (\n      <div id=\"payment-form\" className=\"flex justify-center\">\n        <div className=\"w-full inline-block border p-4 rounded-md\">\n          <div className=\"font-bold text-xl mb-2\">\n            Enter your card details. <br />\n            Your subscription will start now.\n          </div>\n          <p className=\"text-gray-700 text-base\">\n            â†’ Total due now <span>{productSelected.price}</span>\n          </p>\n          <p className=\"text-gray-700 text-base mb-4\">\n            â†’ Subscribing to{' '}\n            <span className=\"font-bold\">{productSelected.name}</span>\n          </p>\n\n          <div className=\"w-full\">\n            <div className=\"flex flex-wrap -mx-3 mb-2\">\n              <div className=\"w-full px-3 md:mb-0\">\n                <label className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\">\n                  Full name\n                </label>\n                <input\n                  className=\"appearance-none block w-full bg-gray-200 border rounded-md py-3 px-2 mb-3 leading-tight focus:outline-none focus:bg-white\"\n                  id=\"name\"\n                  type=\"text\"\n                  placeholder=\"First and last name\"\n                  required\n                />\n              </div>\n            </div>\n            <form id=\"payment-form\" onSubmit={handleSubmit}>\n              <div className=\"flex flex-wrap -mx-3 mb-3\">\n                <div className=\"w-full px-3 mb-0\">\n                  <label className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\">\n                    Card\n                  </label>\n                  <div\n                    className=\"appearance-none block w-full bg-gray-200 text-gray-700 border rounded-md py-3 px-2 leading-tight focus:outline-none focus:bg-white\"\n                    id=\"card-element\"\n                  >\n                    <CardElement\n                      options={{\n                        style: {\n                          base: {\n                            fontSize: '16px',\n                            color: '#32325d',\n                            fontFamily:\n                              '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif',\n                            '::placeholder': {\n                              color: '#a0aec0',\n                            },\n                          },\n                          invalid: {\n                            color: '#9e2146',\n                          },\n                        },\n                      }}\n                    />\n                  </div>\n                  <div className=\"text-gray-700 text-base mt-2\" role=\"alert\">\n                    {errorToDisplay ? errorToDisplay : null}\n                  </div>\n                </div>\n              </div>\n              <button\n                id=\"submit-premium\"\n                className=\"w-full bg-pasha hover:bg-white hover:shadow-outline hover:text-pasha hover:border hover:border-black focus:shadow-outline text-white focus:bg-white focus:text-pasha font-light py-2 px-4 rounded-md\"\n                type=\"submit\"\n              >\n                <div className=\"\">\n                  <div>{subscribing ? 'Subscribing...' : 'Subscribe'}</div>\n                </div>\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nconst PaymentForm = (props) => (\n  <Elements stripe={stripePromise}>\n    <CheckoutForm {...props} />\n  </Elements>\n);\n\nexport default PaymentForm;\n"]},"metadata":{},"sourceType":"module"}